Crux Program has no type errors.
ast.DeclarationList(4)
  ast.FunctionDefinition(4)[Symbol(main:func(TypeList()):void), []]
    ast.StatementList(5)
      void: ast.Call(5)[Symbol(printBool)]
        bool: ast.OpExpr(5)[LOGIC_AND]
          bool: ast.OpExpr(5)[LT]
            int: ast.LiteralInt(5)[3]
            int: ast.LiteralInt(5)[5]
          bool: ast.OpExpr(5)[GT]
            int: ast.LiteralInt(5)[4]
            int: ast.LiteralInt(5)[2]
      void: ast.Call(6)[Symbol(println)]
      void: ast.Call(7)[Symbol(printBool)]
        bool: ast.OpExpr(7)[LOGIC_OR]
          bool: ast.OpExpr(7)[LOGIC_AND]
            bool: ast.OpExpr(7)[LT]
              int: ast.LiteralInt(7)[3]
              int: ast.LiteralInt(7)[5]
            bool: ast.OpExpr(7)[LT]
              int: ast.LiteralInt(7)[2]
              int: ast.LiteralInt(7)[1]
          bool: ast.OpExpr(7)[LT]
            int: ast.LiteralInt(7)[1]
            int: ast.LiteralInt(7)[2]
      void: ast.Call(8)[Symbol(println)]
      void: ast.Call(9)[Symbol(printBool)]
        bool: ast.OpExpr(9)[LOGIC_AND]
          bool: ast.OpExpr(9)[LT]
            int: ast.OpExpr(9)[ADD]
              int: ast.LiteralInt(9)[1]
              int: ast.LiteralInt(9)[2]
            int: ast.LiteralInt(9)[4]
          bool: ast.OpExpr(9)[GT]
            int: ast.LiteralInt(9)[2]
            int: ast.LiteralInt(9)[1]
      void: ast.Call(10)[Symbol(println)]
      void: ast.Call(11)[Symbol(printBool)]
        bool: ast.OpExpr(11)[LOGIC_OR]
          bool: ast.OpExpr(11)[LOGIC_AND]
            bool: ast.LiteralBool(11)[FALSE]
            bool: ast.LiteralBool(11)[FALSE]
          bool: ast.LiteralBool(11)[FALSE]
      void: ast.Call(12)[Symbol(println)]
      void: ast.Call(13)[Symbol(printBool)]
        bool: ast.OpExpr(13)[LOGIC_OR]
          bool: ast.OpExpr(13)[LOGIC_AND]
            bool: ast.LiteralBool(13)[FALSE]
            bool: ast.LiteralBool(13)[FALSE]
          bool: ast.LiteralBool(13)[TRUE]
      void: ast.Call(14)[Symbol(println)]
      void: ast.Call(15)[Symbol(printBool)]
        bool: ast.OpExpr(15)[LOGIC_OR]
          bool: ast.OpExpr(15)[LOGIC_AND]
            bool: ast.LiteralBool(15)[FALSE]
            bool: ast.LiteralBool(15)[TRUE]
          bool: ast.LiteralBool(15)[FALSE]
      void: ast.Call(16)[Symbol(println)]
      void: ast.Call(17)[Symbol(printBool)]
        bool: ast.OpExpr(17)[LOGIC_OR]
          bool: ast.OpExpr(17)[LOGIC_AND]
            bool: ast.LiteralBool(17)[FALSE]
            bool: ast.LiteralBool(17)[TRUE]
          bool: ast.LiteralBool(17)[TRUE]
      void: ast.Call(18)[Symbol(println)]
      void: ast.Call(19)[Symbol(printBool)]
        bool: ast.OpExpr(19)[LOGIC_OR]
          bool: ast.OpExpr(19)[LOGIC_AND]
            bool: ast.LiteralBool(19)[TRUE]
            bool: ast.LiteralBool(19)[FALSE]
          bool: ast.LiteralBool(19)[FALSE]
      void: ast.Call(20)[Symbol(println)]
      void: ast.Call(21)[Symbol(printBool)]
        bool: ast.OpExpr(21)[LOGIC_OR]
          bool: ast.OpExpr(21)[LOGIC_AND]
            bool: ast.LiteralBool(21)[TRUE]
            bool: ast.LiteralBool(21)[FALSE]
          bool: ast.LiteralBool(21)[TRUE]
      void: ast.Call(22)[Symbol(println)]
      void: ast.Call(23)[Symbol(printBool)]
        bool: ast.OpExpr(23)[LOGIC_OR]
          bool: ast.OpExpr(23)[LOGIC_AND]
            bool: ast.LiteralBool(23)[TRUE]
            bool: ast.LiteralBool(23)[TRUE]
          bool: ast.LiteralBool(23)[FALSE]
      void: ast.Call(24)[Symbol(println)]
      void: ast.Call(25)[Symbol(printBool)]
        bool: ast.OpExpr(25)[LOGIC_OR]
          bool: ast.OpExpr(25)[LOGIC_AND]
            bool: ast.LiteralBool(25)[TRUE]
            bool: ast.LiteralBool(25)[TRUE]
          bool: ast.LiteralBool(25)[TRUE]
      void: ast.Call(26)[Symbol(println)]
      void: ast.Call(27)[Symbol(printBool)]
        bool: ast.OpExpr(27)[LOGIC_OR]
          bool: ast.LiteralBool(27)[FALSE]
          bool: ast.OpExpr(27)[LOGIC_AND]
            bool: ast.LiteralBool(27)[FALSE]
            bool: ast.LiteralBool(27)[FALSE]
      void: ast.Call(28)[Symbol(println)]
      void: ast.Call(29)[Symbol(printBool)]
        bool: ast.OpExpr(29)[LOGIC_OR]
          bool: ast.LiteralBool(29)[FALSE]
          bool: ast.OpExpr(29)[LOGIC_AND]
            bool: ast.LiteralBool(29)[FALSE]
            bool: ast.LiteralBool(29)[TRUE]
      void: ast.Call(30)[Symbol(println)]
      void: ast.Call(31)[Symbol(printBool)]
        bool: ast.OpExpr(31)[LOGIC_OR]
          bool: ast.LiteralBool(31)[FALSE]
          bool: ast.OpExpr(31)[LOGIC_AND]
            bool: ast.LiteralBool(31)[TRUE]
            bool: ast.LiteralBool(31)[FALSE]
      void: ast.Call(32)[Symbol(println)]
      void: ast.Call(33)[Symbol(printBool)]
        bool: ast.OpExpr(33)[LOGIC_OR]
          bool: ast.LiteralBool(33)[FALSE]
          bool: ast.OpExpr(33)[LOGIC_AND]
            bool: ast.LiteralBool(33)[TRUE]
            bool: ast.LiteralBool(33)[TRUE]
      void: ast.Call(34)[Symbol(println)]
      void: ast.Call(35)[Symbol(printBool)]
        bool: ast.OpExpr(35)[LOGIC_OR]
          bool: ast.LiteralBool(35)[TRUE]
          bool: ast.OpExpr(35)[LOGIC_AND]
            bool: ast.LiteralBool(35)[FALSE]
            bool: ast.LiteralBool(35)[FALSE]
      void: ast.Call(36)[Symbol(println)]
      void: ast.Call(37)[Symbol(printBool)]
        bool: ast.OpExpr(37)[LOGIC_OR]
          bool: ast.LiteralBool(37)[TRUE]
          bool: ast.OpExpr(37)[LOGIC_AND]
            bool: ast.LiteralBool(37)[FALSE]
            bool: ast.LiteralBool(37)[TRUE]
      void: ast.Call(38)[Symbol(println)]
      void: ast.Call(39)[Symbol(printBool)]
        bool: ast.OpExpr(39)[LOGIC_OR]
          bool: ast.LiteralBool(39)[TRUE]
          bool: ast.OpExpr(39)[LOGIC_AND]
            bool: ast.LiteralBool(39)[TRUE]
            bool: ast.LiteralBool(39)[FALSE]
      void: ast.Call(40)[Symbol(println)]
      void: ast.Call(41)[Symbol(printBool)]
        bool: ast.OpExpr(41)[LOGIC_OR]
          bool: ast.LiteralBool(41)[TRUE]
          bool: ast.OpExpr(41)[LOGIC_AND]
            bool: ast.LiteralBool(41)[TRUE]
            bool: ast.LiteralBool(41)[TRUE]
      void: ast.Call(42)[Symbol(println)]
